####
# General YAML conventions:
#  You should quote any value that is not nil or boolean to ensure it is treated as a string and not an integer.
#
#        ~                nil
#        true             Boolean.
#        false            Boolean.
#        'foo'            A string.
#        # Blah, blah.    A comment (will be ignored by the YAML parser).
####

####
# General project information.
####

project_name:      'Foo'                   # Required.  If objects are not yet registered, this will be used as a prefix to the sourceID and will also become a project tag in DOR for each object.

progress_log_file: ~                        # Optional - if left as nil a progress log file will be created in the same location as your
                                            # input yaml file by appending '_progress' to your filename.  If you cannot write to that location
                                            # or want to specify a different filename, you may do so.
                                            #  NOTE: you probably won't be able to write to the thumper drives.  Beware if that's where your config file is.
                                            # In that case, you can specify /dor/preassembly, which is a good alternative and writable.
                                            # Typically based on project name.  A fully qualified path.
                                            # Be sure to keep your progress log file somewhere useful and be aware.
                                            # You will need the progress log for cleanup and restarting.
                                            # PLEASE DO NOT PLACE THIS IN THE LOG FOLDER OF THE PRE-ASSEMBLY CODE FOLDER ON THE SERVER.  IT MAY BE DELETED IF YOU DO THIS.
                    '/dor/preassembly/progress_foo.yaml'  # this is an example of specifying an alternate location

validate_files:    true      # if set to true, then image files will be confirmed as valid before proceeding ... validity ensures they are of the correct mimetype and have color profiles
                   false     # if set to false, then no image validation is performed -- since color profiles are no longer required, this is less critical to check

####
# General options relating to project type and the registration of objects.  For each option, you must select only one value
# from the options shown.
####

project_style:

  # Defines the default structure of content metadata.  Set content_md_creation[:style] below if you want to bundle files into resources.
  # The 'Process : Content Type' tag for each existing object will be examined.  If a known type is set in this tag,
  # it will be used instead of the default below.
  content_structure: 'simple_image'  # Every file in the digital object will appear as a <file> node with <contentMetadata type="image"> and <resource type="image">

                     'file'          # Like simple_image, but with <contentMetadata type="file"> and <resource type="file">.

                     'simple_book'   # Like simple_image, but with <contentMetadata type="book"> and <resource type="page">.

                     'book_with_pdf' # Like simple_book, but any resource nodes with any file other than an image (e.g. a PDF) will have <resource type="file">

                     'book_as_image' # Like simple_book, but with <contentMetadata type="book"> and <resource type="image"> instead of "page".

                     'smpl'          # Used for SMPL projects

  content_tag_override:   false      # DEFAULT if not supplied -- content_structure as defined above is always used even if the object is registered with a content type tag
                          true       # if set to true; then content_structure type is deteremined from registered object content type tag using mappings defined in pre-assembly if possible;
                                     # if no content tag is available or an unknown mapping occurs, the default content_structure defined in the YAML is used
####
# Paths to the pre-assembly input and output.
####

bundle_dir:  '/foo/bar/revs'  # Input location for the project content (i.e., the
                             # "bundle"). May contain images directly or may contain
                             # folders, one per object, usually named by druid.
							               # A fully qualified path.

staging_dir: ~               # Where to put the pre-assembled materials. This is
                             # where the assembly robots expect to find the assembled
                             # content. The default value is /dor/assembly and will be set automatically
                             # if you leave this as nil (~)
                             # Developers and tests may use this in special circumstances.
							               # A fully qualified path.

staging_style:    'copy'     # the staging style, can be "copy" or "symlink", defaults to "copy" if not specified or nil
                             #  if set to "copy" then all discovered files that need to be staged will be copied from the bundle directory to the staging directory
                             #  if set to "symlink", then all discovered files will be symlinked into the staging directory from the bundle directory
####
# Once object containers have been identified, specify which files within those
# containers should be staged (i.e., copied to the staging_dir).
####

stageable_discovery:

  # Option 1: If you set 'use_container' to true, this will simply stage the entire object directory that was matched with the glob above.
  use_container: true    # If true , set glob and regex to nil below.
                 false   # If false, use glob and regex below.

  # Option 2: If you set 'use_container' to false, staging will be done via a two-phase container crawl based on the glob and regex patterns specified below.
  #
  # The glob parameter can be used to flatten or partially flatten the input
  # directory structure. For example, consider this input structure:
  #
  #   aa111bb2222/
  #     00/
  #       1.tif
  #       2.tif
  #     01/
  #       1.jp2
  #       2.jp2
  #
  # If glob = '*', both the 00 and 01 subdirectories will be staged in
  # their entirely, preserving the original structure.
  #
  # If glob = '00', only the 00 subdirectory will be staged, preserving
  # its original structure.
  #
  # If glob = '00/*', only the files within 00 will be staged, which means
  # that the 00 subdirectory will not appear in the staged materials, as
  # shown here:
  #
  #    aa/111/bb/2222/
  #      1.tif
  #      2.tif
  #
  # As above, express the glob and regex in relative terms -- in
  # this case, relative to the container.
  #
  #  Optionally, the results of that glob pattern can be filtered,
  #     retaining only the items matching the given regex (Ruby regular expression).
  #     See http://www.ruby-doc.org/core-1.9.3/Regexp.html
  #
  # Various examples are shown.
  glob:  '0[12]/'  # Stage the 00, 01, and 02 subdirectories.
         '00/*'    # Stage the items in the 00 subdirectory only, but not the '00' folder itself.
         '*/*'     # Stage the items residing at the second level in the structure.
         '**/*'    # Stage all leaf items. Results it total flattening. Use with caution since it may cause file name clashes.  Note-this will also stage all folders
                   #   as well, unless you further restrict to specific files only using the regex below.
         '*'       # Stage all items at the root level of the container (useful for a container that has no structure, just a list of files)

  regex:  ~                       # No filtering.
         '(?ix) \. (tif|xml) $'  # Stage only items with .tif and .xml extentions.
  files_only:  true     # if set to true, then only files will be staged, regardless of glob specified above (i.e. any folders that match the glob will
                        #  be ignored) -- this is useful to avoid duplication of staged files
                        #  if set to false or left off, then anything that matches the glob (and not filtered by regex) will be staged

####
# Restrict objects to be accessioned when using the discovery method
####
accession_items:   ~         # Only valid for projects that do *not* use a manifest.
                            # Used if you need to accession or re-accession only specific objects.
                            # You can supply a list of container names, and indicate if this list is exlcusionary
                            # or inclusionary.  In other words, do you want to *only* accession the named items, or accession
                            # everything *except* those listed? You can also specify if this is a re-accession, in which case the
                            # items will be reset (but not unregistered from DOR) before accessioning again.
                            # If you specify ~, all items will be accessioned and you can leave off the "only" and "except" parameters.
                            # Note that you will probably also want to log this new run using a different progress log file.
                            # In the "only" and "except" list, you should use names that exactly match the folder names in your bundle_dir,
                            # one per line, indented under "only" or "except" and preceeded by a dash as shown in the examples below.
                            # For a normal run, set "accession_items" to ~, which will process all items.
                            # Do not specify both "only" and "except" unless you like flying experimental homebuilt aircraft.
                            # Examples below:
  only:
    - 'aa111aa1111'
    - 'bb222bb2222'              # this is an example of two objects that will be accessioned, put them one per line, prefixed by a space, a dash, and space, add quotes around each item
  except:
    - 'aa111aa1111'
    - 'bb222bb2222'             # this is an example of two objects that will be ignored, put them one per line, prefixed by a space, a dash, and space, add quotes around each item
                               # If set to true, the the files will be removed for /dor/assembly, /dor/workspace and the stacks before accessioning again.  Objects will *not* be re-registered.

####
# Additional materials accompaning the bundle.
#
# These file names below should be expressed in relative terms -- relative to bundle_dir.
####

manifest:         'manifest.csv'       # The manifest file, if 'use_manifest' is true.  Path must be relative to the bundle path. Otherwise, set to ~
checksums_file:   'checksums.txt'      # A provider checksum file (in default md5sum format).  Path must be relative to the bundle path. If none provided, set to ~
desc_md_template: 'mods_template.xml'  # An optional descriptive metadata XML template to use in conjunction with the manifest.  Path can be absolute or relative to the bundle path.

####
# You must indicate the column names of certain fields in the CSV file.
# These should always be lowercase.  Note that if your project is using a manifest for object discovery and has objects already registered, you will
# need a column called "druid" in addition to the columns below.  The "source_id" and "label" columns must exist in this case but can be blank (since objects are already registered).
manifest_cols:
  object_container:   'filename'   # Always required, indicates the column name containing the filename (single file per object) or folder name (multiple files per object) relative to the bundle directory.
  source_id:          'sourceid'   # optional
  label:              'label'      # optional

####
# Attributes related to content metadata generation.
####

# A regex to exclude staged files from contentMetadata.xml (content will still be staged though).
content_exclusion: ~             # Include all staged files in content metadata.
                   '(?i)\.xml$'  # Exclude xml files from content metadata.

# The method used to bundle resources together when generating content metadata.
content_md_creation:
  style:       'default'                # Used by most projects, creates one resource per file.
               'filename'                 # Collects files together into a single resource based on filename -- files with the same name but different extensions will become
                                          # part of a single resource node.
               'dpg'                 # Collects files together into a single resource based on DPG filenaming convention (ignoring _00_,_05_, etc.) -- files with the same name but different extensions will become
                                         # part of a single resource node.
               'smpl'                   # Only used by SMPL projects.  Will generate a content metadata file using the SMPL preContentMetadata.
               'none'                   # Do not generate any contentMetadata.xml file.  Select this option only if you have a previously created valid contentMetadata.xml in the root of your staged folder.
  smpl_manifest:    'smpl_manifest.csv'  # The manifest file for use in SMPL projects.  Typically set to ~ unless style='smpl'


####
# Attributes related common-accessioning steps.
####

publish_attr:  ~  # Most projects should set this to nil.  If not specified or nil, they will be added by the assembly robots based on mimetype.

  # If you want to specify them here, you can do it in two ways.  First off, don't set 'publish_attr' to nil.  Next
  # set it globally for all files, like this:
  shelve:   'no'
  publish:  'no'
  preserve: 'yes'

  # The second is by mime-type, nesting under each mimetype (which must be quoted), like this.  The attributes will be set according to the
  #  mime-type of the file.  You must also set a 'default', which will be applied if no mime-type matches.  If any of the default attributes are
  # set to nil and no mime-type matches, the attributes will be left off and added during assembly according to the defaults.
  'image/jp2':
    publish:            'yes'
    shelve:             'yes'
    preserve:           'no'
  'image/tiff':
    publish:            'no'
    shelve:             'no'
    preserve:           'yes'
  'default':
    publish:             'no'
    shelve:              'no'
    preserve:            'yes'
