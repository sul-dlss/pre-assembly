####
# General YAML conventions:
#  You should quote any value that is not nil or boolean to ensure it is treated as a string and not an integer.
#
#        ~                nil
#        true             Boolean.
#        false            Boolean.
#        'foo'            A string.
#        # Blah, blah.    A comment (will be ignored by the YAML parser).
####

####
# General project information.
####

project_name:      'Foo'                   # Required.  If objects are not yet registered, this will be used as a prefix to the sourceID and will also become a project tag in DOR for each object.

progress_log_file: ~                        # Optional - if left as nil a progress log file will be created in the same location as your
                                            # input yaml file by appending '_progress' to your filename.  If you cannot write to that location
                                            # or want to specify a different filename, you may do so.
                                            #  NOTE: you probably won't be able to write to the thumper drives.  Beware if that's where your config file is.
                                            # In that case, you can specify /dor/preassembly, which is a good alternative and writable.
                                            # Typically based on project name.  A fully qualified path.
                                            # Be sure to keep your progress log file somewhere useful and be aware.
                                            # You will need the progress log for cleanup and restarting.
                                            # PLEASE DO NOT PLACE THIS IN THE LOG FOLDER OF THE PRE-ASSEMBLY CODE FOLDER ON THE SERVER.  IT MAY BE DELETED IF YOU DO THIS.
                    '/dor/preassembly/progress_foo.yaml'  # this is an example of specifying an alternate location

####
# General options relating to project type and the registration of objects.  For each option, you must select only one value
# from the options shown.
####

project_style:

  # Defines the default structure of content metadata.  Set content_md_creation[:style] below if you want to bundle files into resources.
  # The 'Process : Content Type' tag for each existing object will be examined.  If a known type is set in this tag,
  # it will be used instead of the default below.
  content_structure: 'simple_image'  # Every file in the digital object will appear as a <file> node with <contentMetadata type="image"> and <resource type="image">

                     'file'          # Like simple_image, but with <contentMetadata type="file"> and <resource type="file">.

                     'simple_book'   # Like simple_image, but with <contentMetadata type="book"> and <resource type="page">.

                     'book_with_pdf' # Like simple_book, but any resource nodes with any file other than an image (e.g. a PDF) will have <resource type="file">

                     'book_as_image' # Like simple_book, but with <contentMetadata type="book"> and <resource type="image"> instead of "page".

                     'smpl'          # Used for SMPL projects

                     '3d'            # Bundles 3d file types into <contentMetadata type="3d"> and 3d file extensions into <resource type="3d"> and others into <resource type="file">

  content_tag_override:   false      # DEFAULT if not supplied -- content_structure as defined above is always used even if the object is registered with a content type tag
                          true       # if set to true; then content_structure type is deteremined from registered object content type tag using mappings defined in pre-assembly if possible;
                                     # if no content tag is available or an unknown mapping occurs, the default content_structure defined in the YAML is used
####
# Paths to the pre-assembly input and output.
####

bundle_dir:  '/foo/bar/revs'  # Input location for the project content (i.e., the
                             # "bundle"). May contain images directly or may contain
                             # folders, one per object, usually named by druid.
                             # A fully qualified path.

staging_style:    'copy'     # the staging style, can be "copy" or "symlink", defaults to "copy" if not specified or nil
                             #  if set to "copy" then all discovered files that need to be staged will be copied from the bundle directory to the staging directory
                             #  if set to "symlink", then all discovered files will be symlinked into the staging directory from the bundle directory

####
# The CSV file is expected with columns (always lowercase):
# - 'druid', required
# - 'object', required

####
# Attributes related to content metadata generation.
####

# The method used to bundle resources together when generating content metadata.
content_md_creation:
  style:       'default'                # Used by most projects, creates one resource per file.
               'filename'                 # Collects files together into a single resource based on filename -- files with the same name but different extensions will become
                                          # part of a single resource node.
               'dpg'                 # Collects files together into a single resource based on DPG filenaming convention (ignoring _00_,_05_, etc.) -- files with the same name but different extensions will become
                                         # part of a single resource node.
               'smpl'                   # Only used by SMPL projects.  Will generate a content metadata file using the SMPL preContentMetadata.
               'none'                   # Do not generate any contentMetadata.xml file.  Select this option only if you have a previously created valid contentMetadata.xml in the root of your staged folder.
