#! /usr/bin/env ruby

# Used to test descriptive Metadata generation given a MODs template and a manifest.  This allows you to test how the MODs will be generated during pre-assembly.
# Iterate through each row in the manifest, generate MODs files using MODs template in output directory.

# Peter Mangiafico
# August 21, 2015
#
# Run with
# RAILS_ENV=test bin/mods_report2 manifest.csv mods_template.xml output_directory
require File.expand_path(File.dirname(__FILE__) + '/../config/boot')

def help(error_msg)
  abort "#{error_msg}\n\nUsage:\n ./bin/mods_report2 manifest.csv mods_template.xml output_directory\n"
end

help "Incorrect N of arguments." if ARGV.size != 3
manifest_file = ARGV.shift
help "manifest file file not found." unless File.file? manifest_file
mods_template_file = ARGV.shift
help "manifest file file not found." unless File.file? mods_template_file
output_directory = ARGV.shift
help "Output directory not found or not a directory." unless File.directory? output_directory

# read in MODs template
mods_template_xml = IO.read(mods_template_file)

# read input manifest
@items = PreAssembly::Bundle.import_csv(manifest_file)

puts "Generating #{@items.size} MODs files from #{manifest_file} using MODs template of #{mods_template_file}"

@items.each_with_index do |manifest_row, x|
  druid = manifest_row[:druid]
  sourceid = manifest_row[:sourceid]
  identifier = (druid.blank? ? (sourceid.blank? ? x : sourceid) : druid) # what we will call the filename, either by druid or sourceid depending on the project
  druid = druid.blank? ? "druid:oo000oo0001" : druid # we need a druid to instantiate the object, use the real druid if possible, otherwise just make one up
  dig_obj = PreAssembly::DigitalObject.new(:pid => druid)
  dig_obj.manifest_row = manifest_row
  dig_obj.desc_md_template_xml = mods_template_xml
  if dig_obj.create_desc_metadata_xml
    output_mods_file = File.join(output_directory, "#{identifier.gsub('druid:', '')}.xml")
    File.open(output_mods_file, 'w') { |fh| fh.puts dig_obj.desc_md_xml }
    puts "Saving MODs for sourceID #{identifier}  [#{x} of #{@items.size}]"
  else
    puts "Error: cannot generate desc md xml for #{identifier} [#{x} of #{@items.size}]"
  end
end
